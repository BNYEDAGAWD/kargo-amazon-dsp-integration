version: '3.8'

# Production docker-compose configuration
services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: kargo-dsp-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kargo-dsp-prod-network
    restart: unless-stopped

  # Main application (Production)
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    container_name: kargo-dsp-app-prod
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - DATABASE_ECHO=false
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY}
      - AMAZON_DSP_CLIENT_ID=${AMAZON_DSP_CLIENT_ID}
      - AMAZON_DSP_CLIENT_SECRET=${AMAZON_DSP_CLIENT_SECRET}
      - KARGO_API_KEY=${KARGO_API_KEY}
    ports:
      - "8000:8000"
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - kargo-dsp-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: kargo-dsp-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - kargo-dsp-prod-network
    restart: unless-stopped

  # Redis for production
  redis:
    image: redis:7-alpine
    container_name: kargo-dsp-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_prod_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kargo-dsp-prod-network
    restart: unless-stopped

volumes:
  postgres_prod_data:
  redis_prod_data:

networks:
  kargo-dsp-prod-network:
    driver: bridge