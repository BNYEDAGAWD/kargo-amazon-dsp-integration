version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: kargo-dsp-postgres
    environment:
      POSTGRES_DB: kargo_dsp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kargo-dsp-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: kargo-dsp-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kargo-dsp-network

  # Main application (development)
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: development
    container_name: kargo-dsp-app
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/kargo_dsp
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_ECHO=false
      - LOG_LEVEL=INFO
      - ENVIRONMENT=development
    ports:
      - "8000:8000"  # Main API
      - "8001:8001"  # Prometheus metrics
    volumes:
      - ../app:/app/app  # For development hot reload
      - ../tests:/app/tests
      - ../pyproject.toml:/app/pyproject.toml
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - kargo-dsp-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: kargo-dsp-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - kargo-dsp-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: kargo-dsp-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - kargo-dsp-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  kargo-dsp-network:
    driver: bridge