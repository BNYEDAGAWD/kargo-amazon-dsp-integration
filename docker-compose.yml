version: '3.8'

services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP_VERSION: "${APP_VERSION:-1.0.0}"
        BUILD_DATE: "${BUILD_DATE}"
        VCS_REF: "${VCS_REF}"
    image: kargo-amazon-dsp-integration:${APP_VERSION:-latest}
    container_name: kargo-dsp-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-8000}:8000"
    environment:
      # Application settings
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - APP_VERSION=${APP_VERSION:-1.0.0}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PORT=8000
      - WORKERS=${WORKERS:-2}
      
      # Database configuration
      - DATABASE_URL=postgresql+asyncpg://postgres:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - DATABASE_POOL_SIZE=${DATABASE_POOL_SIZE:-10}
      - DATABASE_MAX_OVERFLOW=${DATABASE_MAX_OVERFLOW:-20}
      
      # External service URLs
      - AMAZON_DSP_BASE_URL=${AMAZON_DSP_BASE_URL}
      - KARGO_API_BASE_URL=${KARGO_API_BASE_URL}
      
      # Security settings
      - SECRET_KEY=${SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - JWT_EXPIRE_MINUTES=${JWT_EXPIRE_MINUTES:-30}
      
      # OpenTelemetry configuration
      - OTEL_SERVICE_NAME=kargo-amazon-dsp-integration
      - OTEL_SERVICE_VERSION=${APP_VERSION:-1.0.0}
      - OTEL_RESOURCE_ATTRIBUTES=service.name=kargo-amazon-dsp-integration,service.version=${APP_VERSION:-1.0.0},deployment.environment=${ENVIRONMENT:-production}
      
      # Monitoring
      - METRICS_ENABLED=${METRICS_ENABLED:-true}
      - HEALTH_CHECK_TIMEOUT=${HEALTH_CHECK_TIMEOUT:-30}
      
      # Container metadata
      - POD_NAME=kargo-dsp-app
      - DEPLOYMENT_ID=${DEPLOYMENT_ID:-local}
    
    volumes:
      - app-logs:/app/logs
      - app-data:/app/data
      - app-tmp:/app/tmp
    
    depends_on:
      - db
      - redis
    
    networks:
      - kargo-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    container_name: kargo-dsp-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-kargo_dsp}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    
    networks:
      - kargo-network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-kargo_dsp}"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: kargo-dsp-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    volumes:
      - redis-data:/data
    
    ports:
      - "${REDIS_PORT:-6379}:6379"
    
    networks:
      - kargo-network
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Nginx reverse proxy (optional for production)
  nginx:
    image: nginx:alpine
    container_name: kargo-dsp-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx-logs:/var/log/nginx
    
    depends_on:
      - app
    
    networks:
      - kargo-network
    
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: kargo-dsp-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    networks:
      - kargo-network
    
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: kargo-dsp-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    depends_on:
      - prometheus
    
    networks:
      - kargo-network
    
    profiles:
      - monitoring

# Named volumes for persistent data
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  app-logs:
    driver: local
  app-data:
    driver: local
  app-tmp:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Network for service communication
networks:
  kargo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16